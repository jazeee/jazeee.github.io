{"version":3,"sources":["webpack:///./src/components/skills/plot.js"],"names":["SkillsPlot","props","_useState","useState","highlightedSkillName","setHighlightedSkillName","_props$skillType","skillType","subSkills","skills","getSkillData","minimumYearToInclude","data","Object","keys","map","name","index","subSkill","_subSkill$scoreWeight","scoreWeight","isCurrentSkill","subSkillExperience","experience","xValues","yValues","values","value","distanceToCurrent","length","x","y","type","hoverinfo","marker","color","getColor","highlightSkillName","_ref","_ref3$data","points","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","react_plotly_js__WEBPACK_IMPORTED_MODULE_9___default","useResizeHandler","className","classNames","plot","layout","title","autosize","xaxis","yaxis","showticklabels","barmode","hovermode","onHover","onUnhover","onClick","onLegendClick","_ref4","curveNumber","datum","onLegendDoubleClick","__webpack_exports__"],"mappings":"6PAMaA,EAAa,SAAAC,GAAS,IAAAC,EACuBC,mBAAS,IAA1DC,EAD0BF,EAAA,GACJG,EADIH,EAAA,GAAAI,EAEEL,EAA3BM,iBAFyB,IAAAD,EAEb,WAFaA,EAG3BE,EAAYC,IAAOC,aAAaH,EAAW,CAC/CI,qBAAsB,OAGlBC,EADgBC,OAAOC,KAAKN,GACPO,IAAI,SAACC,EAAMC,GACpC,IAAMC,EAAWV,EAAUQ,GADmBG,EAEAD,EAAtCE,mBAFsC,IAAAD,EAExB,EAFwBA,EAEnBE,EAAmBH,EAAnBG,eACrBC,EAAqBJ,EAASK,WAC9BC,EAAUX,OAAOC,KAAKQ,GACtBG,EAAUZ,OAAOa,OAAOJ,GAAoBP,IAAI,SAACY,EAAOV,GAC5D,IAAMW,EAAoBJ,EAAQK,OAASZ,EAG3C,OAAOU,GADYP,GAAeC,EADR,EAAI,IAAMO,EAAoB,GACe,MAGzE,MAAO,CACLZ,OACAc,EAAGN,EACHO,EAAGN,EACHO,KAAM,MACNC,UAAW,OACXC,OAAQ,CACNC,MACG/B,GAAwBA,IAAyBY,EAE9C,OADAoB,YAASnB,OAMfoB,EAAqB,SAAAC,GAAgB,IAAAC,IAAAD,EAAbE,QACF,IADe,IAEV,IAAvB5B,KACRP,QAHyC,IAAAkC,EAE1B,GAF0BA,GAGZvB,OAmB/B,OACEyB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACE9B,KAAMA,EACNiC,kBAAkB,EAClBC,UAAWC,IAAWC,KACtBC,OAAQ,CACNC,MAAO3C,EACP4C,UAAU,EACVC,MAAO,CACLF,MAAO,QAETG,MAAO,CACLH,MAAO,uBACPI,gBAAgB,GAElBC,QAAS,QACTC,UAAW,WAEbC,QAASpB,EACTqB,UAAW,kBAAMrD,EAAwB,KACzCsD,QAAStB,EACTuB,cArCkB,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,YACjBC,EAAQnD,EAAKkD,GACnB,GAAIC,EAAO,KACD/C,EAAS+C,EAAT/C,KAGNX,EADED,IAAyBY,EACH,GAEAA,QAG1BX,EAAwB,IAE1B,OAAO,GAyBL2D,oBAAqB,kBAAM,MAKlBC,EAAA,iBAAAhE,GAAK,OAAIwC,EAAAC,EAAAC,cAAC3C,EAAeC","file":"16-cc28a667cbf65fea24e0.js","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"./skills.module.css\";\nimport { skills } from \"../../data/utils\";\nimport Plot from \"react-plotly.js\";\nimport { getColor } from \"../../utils/colors\";\n\nexport const SkillsPlot = props => {\n  const [highlightedSkillName, setHighlightedSkillName] = useState(\"\");\n  const { skillType = \"Language\" } = props;\n  const subSkills = skills.getSkillData(skillType, {\n    minimumYearToInclude: 2010,\n  });\n  const subSkillNames = Object.keys(subSkills);\n  const data = subSkillNames.map((name, index) => {\n    const subSkill = subSkills[name];\n    const { scoreWeight = 1.0, isCurrentSkill } = subSkill;\n    const subSkillExperience = subSkill.experience;\n    const xValues = Object.keys(subSkillExperience);\n    const yValues = Object.values(subSkillExperience).map((value, index) => {\n      const distanceToCurrent = xValues.length - index;\n      const currentMultiplier = 1 + 16 / (distanceToCurrent + 6);\n      const multiplier = scoreWeight * (isCurrentSkill ? currentMultiplier : 1);\n      return value * multiplier;\n    });\n    return {\n      name,\n      x: xValues,\n      y: yValues,\n      type: \"bar\",\n      hoverinfo: \"name\",\n      marker: {\n        color:\n          !highlightedSkillName || highlightedSkillName === name\n            ? getColor(index)\n            : \"gray\",\n      },\n    };\n  });\n\n  const highlightSkillName = ({ points }) => {\n    const [point] = points || [];\n    const { data = {} } = point || {};\n    setHighlightedSkillName(data.name);\n  };\n\n  const onLegendClick = ({ curveNumber }) => {\n    const datum = data[curveNumber];\n    if (datum) {\n      const { name } = datum;\n      // FIXME (jsingh): highlightedSkillName doesn't seem to change.\n      if (highlightedSkillName === name) {\n        setHighlightedSkillName(\"\");\n      } else {\n        setHighlightedSkillName(name);\n      }\n    } else {\n      setHighlightedSkillName(\"\");\n    }\n    return false;\n  };\n\n  return (\n    <Plot\n      data={data}\n      useResizeHandler={true}\n      className={classNames.plot}\n      layout={{\n        title: skillType,\n        autosize: true,\n        xaxis: {\n          title: \"Year\",\n        },\n        yaxis: {\n          title: \"Relative Skill Level\",\n          showticklabels: false,\n        },\n        barmode: \"stack\",\n        hovermode: \"closest\",\n      }}\n      onHover={highlightSkillName}\n      onUnhover={() => setHighlightedSkillName(\"\")}\n      onClick={highlightSkillName}\n      onLegendClick={onLegendClick}\n      onLegendDoubleClick={() => false}\n    />\n  );\n};\n\nexport default props => <SkillsPlot {...props}></SkillsPlot>;\n"],"sourceRoot":""}